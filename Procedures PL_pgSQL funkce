### üîß PostgreSQL procedura: `uprav_extension`

Tato procedura slou≈æ√≠ k √∫pravƒõ hodnoty sloupce `extension` u zamƒõstnance v tabulce `employees`.

#### üß† Co dƒõl√°:
- Najde zamƒõstnance podle `employeenumber`
- Aktualizuje jeho `extension` na novou hodnotu
- Vyp√≠≈°e syst√©movou zpr√°vu (`RAISE NOTICE`) s potvrzen√≠m zmƒõny

#### üõ†Ô∏è Definice:

```sql
DROP PROCEDURE IF EXISTS uprav_extension;

CREATE PROCEDURE uprav_extension(p_employeenumber INT, p_extension VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE employees
    SET extension = p_extension
    WHERE employeenumber = p_employeenumber;

    RAISE NOTICE 'Zamestnanec % byl upraven, ve sloupci extension na: %', p_employeenumber, p_extension;
END;
$$;

- Vol√°n√≠ procedury
CALL uprav_extension(1621, 'x101x4');




-- uk√°zka jednoduche funkce v PL/pgSQL, kter√° zjist√≠, jestli je ƒç√≠slo sud√© nebo lich√©. 
-- Na vstupu vezme INTEGER, provede podminku p≈ôes IF a vrat√≠ text. 

CREATE OR REPLACE FUNCTION suda_licha(num INTEGER)
RETURNS TEXt AS $$
DECLARE 
	vysledek TEXT;
BEGIN
	IF num % 2 = 0 THEN
		vysledek := 'cislo je sude';
	ELSE
		vysledek := 'cislo je liche';
	END if;
	RETURN vysledek;
END;
$$ LANGUAGE plpgsql;


SELECT suda_licha(98);

-- v√Ωstup "cislo je sude"

 
-- tato funkce byla  vytvo≈ôena v r√°mci uƒçen√≠ PL/pgSQL. Slou≈æ√≠ jako uk√°zka praktick√© pr√°ce s funkcemi. 
-- Skript obsahuje napsanou funkci, kter√° vrac√≠ celkov√Ω souƒçet objednan√©ho mno≈æstv√≠ jednotliv√Ωch produkt≈Ø pro zadan√© ƒç√≠slo objedn√°vky. "ordernumber".

CREATE OR REPLACE FUNCTION soucet_objednavek (order_number INTEGER)
RETURNS TABLE (
product_code VARCHAR,
celkem_objednavek NUMERIC) 
AS $$

BEGIN
	RETURN QUERY
	SELECT productcode, SUM(quantityordered)
	FROM orderdetails
	WHERE ordernumber = order_number
	GROUP BY productcode
	ORDER BY SUM(quantityordered) DESC;
END;
$$ LANGUAGE plpgsql;

-- zvol√°ni funkce
SELECT *  FROM soucet_objednavek(10122);
-- v√Ωstup 
"product_code"	"celkem_objednavek"
"S18_1889"	43
"S24_3856"	43
"S12_1099"	42
